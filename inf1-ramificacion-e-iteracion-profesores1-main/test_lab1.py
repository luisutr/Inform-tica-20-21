import pytest
import lab1 as l


@pytest.mark.hard
@pytest.mark.parametrize('L, esperado', [
    ([12314, 122, 35, 5], 5),
    ([11,11,11], None),
    ([], None),
    ([922, 971, 741, 231, 53, 741, 687, 927, 247, 914, 873, 387, 332, 369, 211, 840, 66, 637, 420, 754, 386, 984, 837, 52, 916, 197, 232, 168, 933, 487, 577, 825, 657, 507, 606, 761, 327, 617, 49, 704, 854, 981, 475, 299, 570, 689, 63, 712, 848, 293, 370, 244, 57, 733, 404, 749, 818, 579, 758, 586, 144, 958, 17, 866, 932, 397, 891, 918, 998, 728, 635, 619, 293, 207, 450, 784, 167, 730, 955, 461, 740, 160, 835, 132, 960, 269, 445, 62, 797, 722, 572, 755, 616, 105, 668, 464, 312, 1, 263, 252, 819, 539, 406, 32, 658, 757, 905, 871, 309, 772, 313, 452, 539, 334, 255, 143, 841, 66, 472, 524, 438, 476, 219, 930, 908, 696, 964, 42, 957, 337, 304, 118, 609, 823, 430, 762, 947, 110, 859, 302, 497, 77, 807, 195, 776, 901, 394, 400, 389, 10, 794, 460, 89, 62, 980, 775, 629, 425, 129, 662, 702, 867, 291, 31, 544, 287, 327, 86, 490, 510, 52, 524, 473, 355, 73, 823, 111, 169, 301, 292, 766, 5, 499, 18, 741, 250, 25, 872, 202, 726, 953, 48, 541, 957, 938, 992, 979, 704, 580, 565, 788, 612, 318, 23, 250, 906, 263, 5, 84, 420, 335, 80, 672, 312, 879, 24, 147, 753, 775, 250, 955, 124, 403, 717, 17, 13, 847, 1, 494, 16, 118, 18, 184, 541, 824, 188, 585, 524, 203, 73, 549, 208, 622, 414, 418, 868, 241, 199, 311, 913, 462, 381, 562, 267, 253, 118, 296, 800, 369, 986, 791, 412, 428, 780, 746, 529, 795, 407, 759, 949, 347, 977, 520, 686, 94, 662, 730, 452, 954, 169, 492, 715, 744, 248, 585, 716, 219, 723, 943, 93, 328, 890, 548, 165, 848, 285, 949, 770, 876, 511, 571, 95, 867, 487, 33, 855, 528, 821, 193, 16, 764, 272, 666, 814, 651, 552, 488, 967, 605, 223, 339, 954, 403, 56, 759, 279, 372, 651, 86, 127, 522, 213, 208, 982, 90, 637, 31, 395, 580, 271, 23, 868, 447, 615, 460, 922, 875, 951, 363, 66, 937, 106, 566, 358, 791, 858, 538, 150, 789, 599, 998, 649, 37, 148, 194, 756, 411, 216, 567, 558, 640, 390, 39, 752, 702, 108, 779, 913, 533, 516, 621, 396, 355, 901, 320, 599, 660, 192, 510, 54, 799, 743, 356, 484, 285, 711, 650, 510, 25, 890, 447, 227, 51, 407, 259, 491, 167, 812, 924, 404, 875, 241, 749, 562, 480, 874, 198, 268, 865, 243, 341, 371, 275, 439, 236, 119, 244, 36, 258, 803, 288, 756, 414, 848, 875, 580, 694, 745, 658, 110, 496, 987, 875, 311, 665, 316, 288, 85, 518, 896, 121, 832, 199, 308, 345, 667, 816, 59, 995, 139, 126, 570, 366, 17, 233, 590, 424, 218, 718, 705, 530, 126, 429, 662, 200, 624, 31, 163, 847, 39], 144)
])
def test_primer_feo(L, esperado):
    assert l.primer_feo(L) == esperado


@pytest.mark.hard
@pytest.mark.parametrize('n, esperado', [
    (2, 25),
    (4, 77),
    (5, 679),
    (6, 6788),
])
def test_primer_persistente(n, esperado):
    assert l.primer_persistente(n) == esperado

@pytest.mark.hard
def test_primer_cuadron_fuerte():
    pcf = l.primer_cuadron_fuerte()
    assert pcf < 11100
    assert pcf > 11000
    assert str(pcf).startswith('1')
    primero = int('2' + str(pcf)[1:])
    raiz = primero ** .5
    assert raiz == int(raiz)


@pytest.mark.hard
@pytest.mark.parametrize('n, esperado', [
    (12131435, True),
    (1213213, False),
    (21436231, True),
    (212121211, False),
])
def test_es_ondulante(n, esperado):
    assert l.es_ondulante(n) == esperado

@pytest.mark.hard
@pytest.mark.parametrize('p', [
    [-4,0,4],
    [1,0,2,2,4,1],
    [1,0,0,0,2,3],
])
def test_root_bolzano(p):
    assert abs(l.polyval(p,l.root_bolzano(p))) < 1e-4